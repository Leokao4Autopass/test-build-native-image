name: Build Native-image and Build Image and Push to Google Artifact Registry

on:
  push:
    branches: ["*"]

permissions:
  contents: read

jobs:
    build-native-image:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: graalvm/setup-graalvm@v1
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            distribution: graalvm-community
            java-version: '17'
            cache: 'gradle'
            components: 'native-image'
            native-image-musl: 'true'
        - name: show Graalvm version
          run: |
            echo "GRAALVM_HOME: $GRAALVM_HOME"
            echo "JAVA_HOME: $JAVA_HOME"
            java --version
            native-image --version
        - name: Gradle build
          run: |
            cd web
            ../gradlew clean build -Dquarkus.package.type=native -Dquarkus.profile=prod -Dquarkus.native.additional-build-args=-H:-UseContainerSupport
            ls build
        - name: Upload the Native-image used to build the docker image
          uses: actions/upload-artifact@v3
          with:
            name: my-artifact
            path: web/build/*-runner

    build-image:
      runs-on: self-hosted
      permissions: #make sure we add permission to read and write package
        contents: read
        packages: write
      needs: build-native-image
      env:
        LOCATION: ${{ vars.ARTIFACT_REGISTRY_LOCATION }}
        PROJECT_ID: ${{ vars.ARTIFACT_REGISTRY_PROJECT }}
        REPOSITORY: ${{ vars.ARTIFACT_REGISTRY_REPOSITORY }}
        IMAGE_NAME: ${{ vars.IMAGE_NAME }}
      steps:
        - uses: actions/checkout@v3
        - uses: actions/download-artifact@master
          with:
            name: my-artifact
            path: web/build/app-runner

        - name: show artifact
          run: |
            ls web/build

        - name: Login to GCP
          uses: google-github-actions/setup-gcloud@v0 #checkouts GCR repo, so this workflow can access it (TODO 要替換為 google-github-actions/auth)
          with:
            service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }} #parse the value of repository secret called SERVICE_ACCOUNT_KEY that we have created earlier
            project_id: ${{ env.PROJECT_ID }} #parse the value of env called PROJECT_ID
            export_default_credentials: true

        - name: Set IMAGE_TAG
          id: set-image-tag
          run: |
            echo "IMAGE_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

        - name: Build Docker Image
          env:
            IMAGE_TAG: ${{ env.IMAGE_TAG }}
          run: |
            cd web
            docker build -f src/main/docker/Dockerfile.native -t $IMAGE_NAME:$IMAGE_TAG .
        - name: Push Docker Image to Google Artifact Registry
          env:
            IMAGE_TAG: ${{ env.IMAGE_TAG }}
          run: |-
            gcloud auth configure-docker $LOCATION-docker.pkg.dev --quiet
            docker tag $IMAGE_NAME:$IMAGE_TAG $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$IMAGE_TAG 
            docker push $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$IMAGE_TAG